parameters:
  name: ""
  vmImage: ""

jobs:
  - job: ${{ parameters.name }}Test

    pool:
      vmImage: ${{ parameters.vmImage }}

    variables:
      AZURECI: 1
      COMPOSE_FILE: ci/docker-compose.yml
      PYTHONHASHSEED: "random"
      BACKENDS: "impala kudu-master kudu-tserver clickhouse"
      PYTEST_BACKENDS: "impala clickhouse"
    strategy:
      matrix:
        # Impala, kudu and clickhouse backends
        py37_impala_kudu_clickhouse:
          PYTHON_VERSION: "3.7"
        py38_impala_kudu_clickhouse:
          PYTHON_VERSION: "3.8"

    steps:
      # Start databases if BACKENDS is not an empty string. Without this check, docker-compose would start all services (instead of none of them) if no BACKENDS are specified.
      - bash: |
          if [ -n "${BACKENDS}" ]; then
            make start PYTHON_VERSION=$PYTHON_VERSION BACKENDS="${BACKENDS}"
          fi
        displayName: "Start databases"

      - bash: make wait PYTHON_VERSION=$PYTHON_VERSION BACKENDS="${BACKENDS}"
        displayName: "Wait for databases"

      - bash: docker ps
        displayName: "Show running containers"

      - bash: make build PYTHON_VERSION=$PYTHON_VERSION
        displayName: "Build ibis image"

      - bash: docker images
        displayName: "List docker images"

      - bash: |
          sudo mkdir -p /tmp/ibis/test-reports/pytest
          mkdir -p /tmp/env
        displayName: "Make artifacts directories"

      - bash: make docker_run PYTHON_VERSION=$PYTHON_VERSION DOCKER_RUN_COMMAND="conda list"
        displayName: "Show packages in conda environment"

      - bash: make docker_run PYTHON_VERSION=$PYTHON_VERSION DOCKER_RUN_COMMAND="conda list --export > /tmp/env/env.yml"
        displayName: "Capture packages in conda environment"

      - bash: make load PYTHON_VERSION=$PYTHON_VERSION BACKENDS="${BACKENDS}"
        displayName: "Load test datasets"

      - bash: |
          echo "PYTEST_MARK_EXPRESSION: ${PYTEST_MARK_EXPRESSION}"
          docker-compose run \
            -e PYTHONHASHSEED=$PYTHONHASHSEED \
            -e AZURECI=$AZURECI \
            -e PYTEST_BACKENDS="$PYTEST_BACKENDS" \
            ibis \
            pytest ibis/tests ibis/backends/impala/tests ibis/backends/clickhouse/tests \
              -k"not compile and not connect" \
              -ra \
              --doctest-modules \
              --doctest-ignore-import-errors \
              --junitxml=/tmp/test-reports/pytest/junit.xml \
              --cov=ibis \
              --cov-report=xml:/tmp/test-reports/pytest-cov/coverage.xml
        displayName: "Run tests"

      # See #1954
      # - bash: |
      #     bash <(curl -s https://codecov.io/bash) \
      #       -f /tmp/ibis/test-reports/pytest-cov/coverage.xml
      #   displayName: 'Upload coverage'

      - task: PublishTestResults@2
        displayName: "Publish test results from pytest JUnitXML"
        inputs:
          testResultsFiles: /tmp/ibis/test-reports/pytest/junit.xml
          testRunTitle: "Publish test results"
          mergeTestResults: False
        condition: succeededOrFailed() # pass or fail, but not cancelled

      - task: PublishPipelineArtifact@1
        inputs:
          path: /tmp/env/env.yml
          artifact: LinuxCondaEnvironment-$(PYTHON_VERSION)
        displayName: "Publish Linux environment YAML to Azure"
        condition: succeededOrFailed() # pass or fail, but not cancelled
